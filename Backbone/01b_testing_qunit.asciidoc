= Testing in Javascript with QUnit

include::../slide_front_matter.asciidoc[]
== Options for Testing

* JSUnit (Defunct)
* Selenium
* *QUnit*
* Jasmine


== QUnit
* QUnit should be used for Unit testing
* http://qunitjs.com

== Setting up QUnit
+++++
<script src="https://gist.github.com/3838515.js"></script>
+++++

== A basic QUnit Test
+++++
<script src="https://gist.github.com/3838520.js"></script>
+++++


== QUnit Assertions 
* ok(A, Msg)
* equal(A, B, Msg)
* deapEqual(A, B, Msg)
* notEqual(A,B, Msg)


== Organising tests
* test
* module
+++++
<script src="https://gist.github.com/3838527.js"></script>
+++++

== Starting and Stopping
* Use when code is expecting callbacks
* will pause the test suite until "start" is called"
* Stop before the async opp
* Start in the callback 
+++++
<script src="https://gist.github.com/3838532.js"></script>
+++++

== Expect
* Set the number of assertions that a test should have
* Use for async testing and the like 
* expect(Number)

https://gist.github.com/3838533

	
== Testing Ajax 
* Network Requests take an undetermined amount of time
* Networks can fail
* It Is an end-to-end test
* use a mock
https://github.com/appendto/jquery-mockjax

== Testing the DOM
* The DOM can be slow
* The dom may be in an uncertain state
* Solution: Reset the state of the DOM before each test
* Solution: Use Mock Templates

== Mock Templates
........................................
<div>
    <h1 class='header'><%= title =%></h1>
    <div> ...
</div>
........................................

........................................
<h1><%= title %></h1>
........................................

== Strategies for Testing
* Isolate AJAX with Backbone 
* Isolate Dom interaction 
* Pure functions can be tested with Node.js or Rhino

== Headless browsers
* An implementation of Webkit without a UI
* http://phantomjs.org

== Other Options
* Jasmine http://pivotal.github.com/jasmine/
